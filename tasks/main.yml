---
- name: Create system acme group
  become: true
  ansible.builtin.group:
    name: "{{ acme_group }}"
    state: present
    system: true

- name: Create system acme user
  become: true
  ansible.builtin.user:
    name: "{{ acme_user }}"
    state: present
    system: true
    create_home: true
    skeleton: false
    home: "{{ acme_home }}"
    shell: "{{ acme_shell }}"
    group: "{{ acme_group }}"

- name: Ensure required packages are installed
  become: true
  ansible.builtin.apt:
    name: "{{ acmesh_req_packages }}"
    state: present

- name: Ensure directories exist
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    owner: "{{ acme_user }}"
    group: "{{ acme_group }}"
  loop:
    - "{{ acme_home }}"
    - "{{ acmesh_config_path }}"
    - "{{ acmesh_install_path }}"
    - "{{ acmesh_cert_path }}"

- name: Check acme.sh installation
  ansible.builtin.stat:
    path: "{{ acmesh_config_path }}/account.conf"
  register: stat_account_conf

- name: Download and install acme.sh
  when: "not stat_account_conf.stat.exists"
  block:
    - name: Create temporary directory for git repository
      become: true
      become_method: su
      become_user: "{{ acme_user }}"
      become_flags: '-s /bin/sh'
      ansible.builtin.tempfile:
        state: directory
        prefix: acmesh_git_
      register: acme_tmp_repo
      changed_when: False

    - name: Temporary clone acme.sh git repository
      become: true
      become_method: su
      become_user: "{{ acme_user }}"
      become_flags: '-s /bin/sh'
      ansible.builtin.git:
        dest: "{{ acme_tmp_repo.path }}"
        clone: true
        depth: 1
        repo: "{{ acmesh_repository }}"
        version: "{{ acmesh_version }}"
      changed_when: False

    - name: Install acme.sh
      become: true
      become_method: su
      become_user: "{{ acme_user }}"
      become_flags: '-s /bin/sh'
      ansible.builtin.command:
        cmd: >
          "{{ acme_tmp_repo.path }}/acme.sh"
          --install
          --home "{{ acmesh_install_path }}"
          --config-home "{{ acmesh_config_path }}"
          --cert-home "{{ acmesh_cert_path }}"
          --accountemail "{{ acmesh_email | mandatory }}"
          --nocron
        chdir: "{{ acme_tmp_repo.path }}"
        creates: "{{ acmesh_config_path }}/account.conf"

  always:
    - name: Delete temporary git clone
      ansible.builtin.file:
        path: "{{ acme_tmp_repo.path }}"
        state: absent
      changed_when: False

- name: "Set default CA [letsencrypt]"
  become: true
  become_method: su
  become_user: "{{ acme_user }}"
  become_flags: '-s /bin/sh'
  ansible.builtin.lineinfile:
    path: "{{ acmesh_config_path }}/account.conf"
    regexp: '^DEFAULT_ACME_SERVER='
    line: "DEFAULT_ACME_SERVER='https://acme-v02.api.letsencrypt.org/directory'"

- name: Check for existing account key
  ansible.builtin.stat:
    path: "host_files/{{ inventory_hostname }}/acmesh_letsencrypt_account.key"
  register: st_accountkey
  delegate_to: localhost

- name: Create remote path for account.key
  become: true
  ansible.builtin.file:
    path: "{{ acmesh_config_path }}/ca/acme-v02.api.letsencrypt.org/directory"
    state: directory
    mode: 0755
    owner: "{{ acme_user }}"
    group: "{{ acme_group }}"
  when: st_accountkey.stat.exists

- name: Deploy existing account key
  become: true
  ansible.builtin.copy:
    dest: "{{ acmesh_config_path }}/ca/acme-v02.api.letsencrypt.org/directory/account.key"
    src: "{{ st_accountkey.stat.path }}"
    owner: "{{ acme_user }}"
    group: "{{ acme_group }}"
    mode: 0600
  when: st_accountkey.stat.exists

- name: "Create account key"
  become: true
  become_method: su
  become_user: "{{ acme_user }}"
  become_flags: '-s /bin/sh'
  ansible.builtin.command:
    cmd: "{{ acmesh_install_path }}/acme.sh --create-account-key"
    creates: "{{ acmesh_config_path }}/ca/acme-v02.api.letsencrypt.org/directory/account.key"
  environment:
    LE_WORKING_DIR: "{{ acmesh_install_path }}"
    LE_CONFIG_HOME: "{{ acmesh_config_path }}"
  when: not st_accountkey.stat.exists

- name: "Register account"
  become: true
  become_method: su
  become_user: "{{ acme_user }}"
  become_flags: '-s /bin/sh'
  ansible.builtin.command:
    cmd: "{{ acmesh_install_path }}/acme.sh --register-account"
    creates: "{{ acmesh_config_path }}/ca/acme-v02.api.letsencrypt.org/directory/ca.conf"
  environment:
    LE_WORKING_DIR: "{{ acmesh_install_path }}"
    LE_CONFIG_HOME: "{{ acmesh_config_path }}"

- name: Issue certificate with FreeDNS
  become: true
  become_method: su
  become_user: "{{ acme_user }}"
  become_flags: '-s /bin/sh'
  ansible.builtin.command:
    cmd: >
      "{{ acmesh_install_path }}/acme.sh"
      --issue
      --dns dns_freedns
      -d "{{ item.domain }}"
      {% if item.san is defined %}
      {% for san in item.san %}
      -d "{{ san }}"
      {% endfor %}
      {% endif %}
      {% if item.keylength is defined %}
      --keylength "{{ item.keylength }}"
      {% endif %}
      --staging
    creates: "{{ acmesh_cert_path }}/{{ item.domain }}_ecc/{{ item.domain }}.cer"
  environment:
    LE_WORKING_DIR: "{{ acmesh_install_path }}"
    LE_CONFIG_HOME: "{{ acmesh_config_path }}"
    FREEDNS_User: "{{ freedns_user | mandatory}}"
    FREEDNS_Password: "{{ freedns_password | mandatory}}"
  loop: "{{ acme_domains }}"
  when: acme_domains is defined
